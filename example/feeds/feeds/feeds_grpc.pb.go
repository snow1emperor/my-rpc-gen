// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: example/feeds.proto

package feeds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCFeedsClient is the client API for RPCFeeds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCFeedsClient interface {
	// return all chats with bool for user { chat_id: int64, peer_type: int32, state: bool } req: { user_id: int64 }
	GetFeedList(ctx context.Context, in *TLFeedGetFeedList, opts ...grpc.CallOption) (*FeedListState, error)
	// send array with { chat_id: int64, peer_type: int32, state: bool }
	UpdateFeedList(ctx context.Context, in *TLUpdateFeedList, opts ...grpc.CallOption) (*UpdateFeedListStatus, error)
	// for user req: { user_id: int64 }
	ReadHistory(ctx context.Context, in *TLFeedReadHistory, opts ...grpc.CallOption) (*HistoryList, error)
	// for user req: { user_id: int64 }
	GetHistoryCounter(ctx context.Context, in *TLGetHistoryCounter, opts ...grpc.CallOption) (*HistoryCounterState, error)
}

type rPCFeedsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCFeedsClient(cc grpc.ClientConnInterface) RPCFeedsClient {
	return &rPCFeedsClient{cc}
}

func (c *rPCFeedsClient) GetFeedList(ctx context.Context, in *TLFeedGetFeedList, opts ...grpc.CallOption) (*FeedListState, error) {
	out := new(FeedListState)
	err := c.cc.Invoke(ctx, "/feeds.RPCFeeds/GetFeedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFeedsClient) UpdateFeedList(ctx context.Context, in *TLUpdateFeedList, opts ...grpc.CallOption) (*UpdateFeedListStatus, error) {
	out := new(UpdateFeedListStatus)
	err := c.cc.Invoke(ctx, "/feeds.RPCFeeds/UpdateFeedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFeedsClient) ReadHistory(ctx context.Context, in *TLFeedReadHistory, opts ...grpc.CallOption) (*HistoryList, error) {
	out := new(HistoryList)
	err := c.cc.Invoke(ctx, "/feeds.RPCFeeds/ReadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFeedsClient) GetHistoryCounter(ctx context.Context, in *TLGetHistoryCounter, opts ...grpc.CallOption) (*HistoryCounterState, error) {
	out := new(HistoryCounterState)
	err := c.cc.Invoke(ctx, "/feeds.RPCFeeds/GetHistoryCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFeedsServer is the server API for RPCFeeds service.
// All implementations must embed UnimplementedRPCFeedsServer
// for forward compatibility
type RPCFeedsServer interface {
	// return all chats with bool for user { chat_id: int64, peer_type: int32, state: bool } req: { user_id: int64 }
	GetFeedList(context.Context, *TLFeedGetFeedList) (*FeedListState, error)
	// send array with { chat_id: int64, peer_type: int32, state: bool }
	UpdateFeedList(context.Context, *TLUpdateFeedList) (*UpdateFeedListStatus, error)
	// for user req: { user_id: int64 }
	ReadHistory(context.Context, *TLFeedReadHistory) (*HistoryList, error)
	// for user req: { user_id: int64 }
	GetHistoryCounter(context.Context, *TLGetHistoryCounter) (*HistoryCounterState, error)
	mustEmbedUnimplementedRPCFeedsServer()
}

// UnimplementedRPCFeedsServer must be embedded to have forward compatible implementations.
type UnimplementedRPCFeedsServer struct {
}

func (UnimplementedRPCFeedsServer) GetFeedList(context.Context, *TLFeedGetFeedList) (*FeedListState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedList not implemented")
}
func (UnimplementedRPCFeedsServer) UpdateFeedList(context.Context, *TLUpdateFeedList) (*UpdateFeedListStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedList not implemented")
}
func (UnimplementedRPCFeedsServer) ReadHistory(context.Context, *TLFeedReadHistory) (*HistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHistory not implemented")
}
func (UnimplementedRPCFeedsServer) GetHistoryCounter(context.Context, *TLGetHistoryCounter) (*HistoryCounterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryCounter not implemented")
}
func (UnimplementedRPCFeedsServer) mustEmbedUnimplementedRPCFeedsServer() {}

// UnsafeRPCFeedsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCFeedsServer will
// result in compilation errors.
type UnsafeRPCFeedsServer interface {
	mustEmbedUnimplementedRPCFeedsServer()
}

func RegisterRPCFeedsServer(s grpc.ServiceRegistrar, srv RPCFeedsServer) {
	s.RegisterService(&RPCFeeds_ServiceDesc, srv)
}

func _RPCFeeds_GetFeedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFeedGetFeedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFeedsServer).GetFeedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.RPCFeeds/GetFeedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFeedsServer).GetFeedList(ctx, req.(*TLFeedGetFeedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFeeds_UpdateFeedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdateFeedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFeedsServer).UpdateFeedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.RPCFeeds/UpdateFeedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFeedsServer).UpdateFeedList(ctx, req.(*TLUpdateFeedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFeeds_ReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFeedReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFeedsServer).ReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.RPCFeeds/ReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFeedsServer).ReadHistory(ctx, req.(*TLFeedReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFeeds_GetHistoryCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLGetHistoryCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFeedsServer).GetHistoryCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.RPCFeeds/GetHistoryCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFeedsServer).GetHistoryCounter(ctx, req.(*TLGetHistoryCounter))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCFeeds_ServiceDesc is the grpc.ServiceDesc for RPCFeeds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCFeeds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feeds.RPCFeeds",
	HandlerType: (*RPCFeedsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeedList",
			Handler:    _RPCFeeds_GetFeedList_Handler,
		},
		{
			MethodName: "UpdateFeedList",
			Handler:    _RPCFeeds_UpdateFeedList_Handler,
		},
		{
			MethodName: "ReadHistory",
			Handler:    _RPCFeeds_ReadHistory_Handler,
		},
		{
			MethodName: "GetHistoryCounter",
			Handler:    _RPCFeeds_GetHistoryCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/feeds.proto",
}
