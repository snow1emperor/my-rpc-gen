// Code generated by goctl. DO NOT EDIT.
// Source: feeds.proto

package server

import (
	"context"

	"my-rpc-gen/example/feeds/feeds"
	"my-rpc-gen/example/feeds/internal/logic"
	"my-rpc-gen/example/feeds/internal/svc"
)

type RPCFeedsServer struct {
	svcCtx *svc.ServiceContext
	feeds.UnimplementedRPCFeedsServer
}

func NewRPCFeedsServer(svcCtx *svc.ServiceContext) *RPCFeedsServer {
	return &RPCFeedsServer{
		svcCtx: svcCtx,
	}
}

// return all chats with bool for user { chat_id: int64, peer_type: int32, state: bool } req: { user_id: int64 }
func (s *RPCFeedsServer) GetFeedList(ctx context.Context, in *feeds.TLFeedGetFeedList) (*feeds.FeedListState, error) {
	l := logic.NewGetFeedListLogic(ctx, s.svcCtx)
	return l.GetFeedList(in)
}

// send array with { chat_id: int64, peer_type: int32, state: bool }
func (s *RPCFeedsServer) UpdateFeedList(ctx context.Context, in *feeds.TLUpdateFeedList) (*feeds.UpdateFeedListStatus, error) {
	l := logic.NewUpdateFeedListLogic(ctx, s.svcCtx)
	return l.UpdateFeedList(in)
}

// for user req: { user_id: int64 }
func (s *RPCFeedsServer) ReadHistory(ctx context.Context, in *feeds.TLFeedReadHistory) (*feeds.HistoryList, error) {
	l := logic.NewReadHistoryLogic(ctx, s.svcCtx)
	return l.ReadHistory(in)
}

// for user req: { user_id: int64 }
func (s *RPCFeedsServer) GetHistoryCounter(ctx context.Context, in *feeds.TLGetHistoryCounter) (*feeds.HistoryCounterState, error) {
	l := logic.NewGetHistoryCounterLogic(ctx, s.svcCtx)
	return l.GetHistoryCounter(in)
}
