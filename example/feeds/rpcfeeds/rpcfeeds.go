// Code generated by goctl. DO NOT EDIT.
// Source: feeds.proto

package rpcfeeds

import (
	"context"

	"my-rpc-gen/example/feeds/feeds"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FeedItemState        = feeds.FeedItemState
	FeedListState        = feeds.FeedListState
	HistoryCounterState  = feeds.HistoryCounterState
	HistoryItem          = feeds.HistoryItem
	HistoryList          = feeds.HistoryList
	ResponseEmpty        = feeds.ResponseEmpty
	TLFeedGetFeedList    = feeds.TLFeedGetFeedList
	TLFeedReadHistory    = feeds.TLFeedReadHistory
	TLGetHistoryCounter  = feeds.TLGetHistoryCounter
	TLUpdateFeedList     = feeds.TLUpdateFeedList
	UpdateFeedListStatus = feeds.UpdateFeedListStatus

	RPCFeeds interface {
		// return all chats with bool for user { chat_id: int64, peer_type: int32, state: bool } req: { user_id: int64 }
		GetFeedList(ctx context.Context, in *TLFeedGetFeedList, opts ...grpc.CallOption) (*FeedListState, error)
		// send array with { chat_id: int64, peer_type: int32, state: bool }
		UpdateFeedList(ctx context.Context, in *TLUpdateFeedList, opts ...grpc.CallOption) (*UpdateFeedListStatus, error)
		// for user req: { user_id: int64 }
		ReadHistory(ctx context.Context, in *TLFeedReadHistory, opts ...grpc.CallOption) (*HistoryList, error)
		// for user req: { user_id: int64 }
		GetHistoryCounter(ctx context.Context, in *TLGetHistoryCounter, opts ...grpc.CallOption) (*HistoryCounterState, error)
	}

	defaultRPCFeeds struct {
		cli zrpc.Client
	}
)

func NewRPCFeeds(cli zrpc.Client) RPCFeeds {
	return &defaultRPCFeeds{
		cli: cli,
	}
}

// return all chats with bool for user { chat_id: int64, peer_type: int32, state: bool } req: { user_id: int64 }
func (m *defaultRPCFeeds) GetFeedList(ctx context.Context, in *TLFeedGetFeedList, opts ...grpc.CallOption) (*FeedListState, error) {
	client := feeds.NewRPCFeedsClient(m.cli.Conn())
	return client.GetFeedList(ctx, in, opts...)
}

// send array with { chat_id: int64, peer_type: int32, state: bool }
func (m *defaultRPCFeeds) UpdateFeedList(ctx context.Context, in *TLUpdateFeedList, opts ...grpc.CallOption) (*UpdateFeedListStatus, error) {
	client := feeds.NewRPCFeedsClient(m.cli.Conn())
	return client.UpdateFeedList(ctx, in, opts...)
}

// for user req: { user_id: int64 }
func (m *defaultRPCFeeds) ReadHistory(ctx context.Context, in *TLFeedReadHistory, opts ...grpc.CallOption) (*HistoryList, error) {
	client := feeds.NewRPCFeedsClient(m.cli.Conn())
	return client.ReadHistory(ctx, in, opts...)
}

// for user req: { user_id: int64 }
func (m *defaultRPCFeeds) GetHistoryCounter(ctx context.Context, in *TLGetHistoryCounter, opts ...grpc.CallOption) (*HistoryCounterState, error) {
	client := feeds.NewRPCFeedsClient(m.cli.Conn())
	return client.GetHistoryCounter(ctx, in, opts...)
}
